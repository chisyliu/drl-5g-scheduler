// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nn_config.proto

#ifndef PROTOBUF_nn_5fconfig_2eproto__INCLUDED
#define PROTOBUF_nn_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ddrl {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_nn_5fconfig_2eproto();
void protobuf_AssignDesc_nn_5fconfig_2eproto();
void protobuf_ShutdownFile_nn_5fconfig_2eproto();

class nn_config;

enum nn_config_af_type {
  nn_config_af_type_NONE = 0,
  nn_config_af_type_RELU = 1,
  nn_config_af_type_SIGMOID = 2,
  nn_config_af_type_TANH = 3,
  nn_config_af_type_nn_config_af_type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  nn_config_af_type_nn_config_af_type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool nn_config_af_type_IsValid(int value);
const nn_config_af_type nn_config_af_type_af_type_MIN = nn_config_af_type_NONE;
const nn_config_af_type nn_config_af_type_af_type_MAX = nn_config_af_type_TANH;
const int nn_config_af_type_af_type_ARRAYSIZE = nn_config_af_type_af_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* nn_config_af_type_descriptor();
inline const ::std::string& nn_config_af_type_Name(nn_config_af_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    nn_config_af_type_descriptor(), value);
}
inline bool nn_config_af_type_Parse(
    const ::std::string& name, nn_config_af_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<nn_config_af_type>(
    nn_config_af_type_descriptor(), name, value);
}
// ===================================================================

class nn_config : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ddrl.nn_config) */ {
 public:
  nn_config();
  virtual ~nn_config();

  nn_config(const nn_config& from);

  inline nn_config& operator=(const nn_config& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const nn_config& default_instance();

  void Swap(nn_config* other);

  // implements Message ----------------------------------------------

  inline nn_config* New() const { return New(NULL); }

  nn_config* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const nn_config& from);
  void MergeFrom(const nn_config& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(nn_config* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef nn_config_af_type af_type;
  static const af_type NONE =
    nn_config_af_type_NONE;
  static const af_type RELU =
    nn_config_af_type_RELU;
  static const af_type SIGMOID =
    nn_config_af_type_SIGMOID;
  static const af_type TANH =
    nn_config_af_type_TANH;
  static inline bool af_type_IsValid(int value) {
    return nn_config_af_type_IsValid(value);
  }
  static const af_type af_type_MIN =
    nn_config_af_type_af_type_MIN;
  static const af_type af_type_MAX =
    nn_config_af_type_af_type_MAX;
  static const int af_type_ARRAYSIZE =
    nn_config_af_type_af_type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  af_type_descriptor() {
    return nn_config_af_type_descriptor();
  }
  static inline const ::std::string& af_type_Name(af_type value) {
    return nn_config_af_type_Name(value);
  }
  static inline bool af_type_Parse(const ::std::string& name,
      af_type* value) {
    return nn_config_af_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated uint32 nn_arch = 2;
  int nn_arch_size() const;
  void clear_nn_arch();
  static const int kNnArchFieldNumber = 2;
  ::google::protobuf::uint32 nn_arch(int index) const;
  void set_nn_arch(int index, ::google::protobuf::uint32 value);
  void add_nn_arch(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      nn_arch() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_nn_arch();

  // repeated .ddrl.nn_config.af_type af_config = 3;
  int af_config_size() const;
  void clear_af_config();
  static const int kAfConfigFieldNumber = 3;
  ::ddrl::nn_config_af_type af_config(int index) const;
  void set_af_config(int index, ::ddrl::nn_config_af_type value);
  void add_af_config(::ddrl::nn_config_af_type value);
  const ::google::protobuf::RepeatedField<int>& af_config() const;
  ::google::protobuf::RepeatedField<int>* mutable_af_config();

  // @@protoc_insertion_point(class_scope:ddrl.nn_config)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > nn_arch_;
  mutable int _nn_arch_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> af_config_;
  mutable int _af_config_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_nn_5fconfig_2eproto();
  friend void protobuf_AssignDesc_nn_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_nn_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static nn_config* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// nn_config

// optional string name = 1;
inline void nn_config::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& nn_config::name() const {
  // @@protoc_insertion_point(field_get:ddrl.nn_config.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void nn_config::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ddrl.nn_config.name)
}
inline void nn_config::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ddrl.nn_config.name)
}
inline void nn_config::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ddrl.nn_config.name)
}
inline ::std::string* nn_config::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ddrl.nn_config.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* nn_config::release_name() {
  // @@protoc_insertion_point(field_release:ddrl.nn_config.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void nn_config::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ddrl.nn_config.name)
}

// repeated uint32 nn_arch = 2;
inline int nn_config::nn_arch_size() const {
  return nn_arch_.size();
}
inline void nn_config::clear_nn_arch() {
  nn_arch_.Clear();
}
inline ::google::protobuf::uint32 nn_config::nn_arch(int index) const {
  // @@protoc_insertion_point(field_get:ddrl.nn_config.nn_arch)
  return nn_arch_.Get(index);
}
inline void nn_config::set_nn_arch(int index, ::google::protobuf::uint32 value) {
  nn_arch_.Set(index, value);
  // @@protoc_insertion_point(field_set:ddrl.nn_config.nn_arch)
}
inline void nn_config::add_nn_arch(::google::protobuf::uint32 value) {
  nn_arch_.Add(value);
  // @@protoc_insertion_point(field_add:ddrl.nn_config.nn_arch)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
nn_config::nn_arch() const {
  // @@protoc_insertion_point(field_list:ddrl.nn_config.nn_arch)
  return nn_arch_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
nn_config::mutable_nn_arch() {
  // @@protoc_insertion_point(field_mutable_list:ddrl.nn_config.nn_arch)
  return &nn_arch_;
}

// repeated .ddrl.nn_config.af_type af_config = 3;
inline int nn_config::af_config_size() const {
  return af_config_.size();
}
inline void nn_config::clear_af_config() {
  af_config_.Clear();
}
inline ::ddrl::nn_config_af_type nn_config::af_config(int index) const {
  // @@protoc_insertion_point(field_get:ddrl.nn_config.af_config)
  return static_cast< ::ddrl::nn_config_af_type >(af_config_.Get(index));
}
inline void nn_config::set_af_config(int index, ::ddrl::nn_config_af_type value) {
  af_config_.Set(index, value);
  // @@protoc_insertion_point(field_set:ddrl.nn_config.af_config)
}
inline void nn_config::add_af_config(::ddrl::nn_config_af_type value) {
  af_config_.Add(value);
  // @@protoc_insertion_point(field_add:ddrl.nn_config.af_config)
}
inline const ::google::protobuf::RepeatedField<int>&
nn_config::af_config() const {
  // @@protoc_insertion_point(field_list:ddrl.nn_config.af_config)
  return af_config_;
}
inline ::google::protobuf::RepeatedField<int>*
nn_config::mutable_af_config() {
  // @@protoc_insertion_point(field_mutable_list:ddrl.nn_config.af_config)
  return &af_config_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ddrl

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ddrl::nn_config_af_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ddrl::nn_config_af_type>() {
  return ::ddrl::nn_config_af_type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_nn_5fconfig_2eproto__INCLUDED
