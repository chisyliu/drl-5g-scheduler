--- srsLTE/srsenb/src/stack/mac/scheduler_metric.cc	2021-03-25 21:20:59.992589519 +1100
+++ srsLTE_modified/srsenb/src/stack/mac/scheduler_metric.cc	2021-03-24 22:50:26.983183000 +1100
@@ -49,6 +49,44 @@ void dl_metric_rr::sched_users(std::map<
 
   if (ue_db.empty())
     return;
+#ifdef ENABLE_DDRL
+	for (auto& ue_pair : ue_db) {
+		sched_ue *user = &ue_pair.second;
+		uint32_t tti_dl = tti_sched->get_tti_tx_dl();
+		uint32_t req_bytes = user->get_pending_dl_new_data_total(tti_dl);
+		
+		/// find the required bytes for bearers
+		uint32_t req_bytes_control = 0;
+		for (int i = 0; i < 3; i++) {
+			req_bytes_control += user->get_dl_lc_buffer_size(i);
+		}
+
+		dl_harq_proc*   h;
+		h = user->get_dl_harq(tti_dl%8);
+		if (h and req_bytes and (req_bytes_control or user->temp_output.tx())) {
+			h->reset_pending_data();
+			uint32_t final_bytes = 0;
+			if (req_bytes_control > 0) {
+				final_bytes = req_bytes_control*1.2;
+				user->tti_from_control_txed = 0;
+			} else {
+				final_bytes = user->PACKET_SIZE;
+			}
+		
+			uint32_t pending_rbg = user->prb_to_rbg(
+				user->get_required_prb_dl(final_bytes, tti_sched->get_nof_ctrl_symbols())*1.2);
+			rbgmask_t newtx_mask(tti_sched->get_dl_mask().size());
+			find_allocation(pending_rbg, &newtx_mask);
+			if (newtx_mask.any()) { // some empty spaces were found
+				auto code = tti_sched->alloc_dl_user(user, newtx_mask, h->get_id());
+				if (code == alloc_outcome_t::SUCCESS) {
+					log_h->info("SCHED: DRL scheduled rnti=0x%x\n", user->get_rnti());
+				}
+			}
+		}
+	}
+	return;
+#endif
 
   // give priority in a time-domain RR basis
   uint32_t priority_idx = tti_alloc->get_tti_tx_dl() % (uint32_t)ue_db.size();
