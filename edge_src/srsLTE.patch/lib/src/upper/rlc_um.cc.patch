--- srsLTE/lib/src/upper/rlc_um.cc	2021-03-25 21:20:59.984589442 +1100
+++ srsLTE_modified/lib/src/upper/rlc_um.cc	2021-03-22 16:20:01.268532000 +1100
@@ -390,7 +390,9 @@ int rlc_um::rlc_um_tx::build_data_pdu(ui
     pthread_mutex_unlock(&mutex);
     return 0;
   }
-
+#ifdef ENABLE_DDRL
+	bool a_packet_txed = false;
+#endif
   // Check for SDU segment
   if(tx_sdu) {
     uint32_t space = pdu_space-head_len;
@@ -412,10 +414,18 @@ int rlc_um::rlc_um_tx::build_data_pdu(ui
     }
     pdu_space -= SRSLTE_MIN(to_move, pdu->get_tailroom());
     header.fi |= RLC_FI_FIELD_NOT_START_ALIGNED; // First byte does not correspond to first byte of SDU
+#ifdef ENABLE_DDRL
+	a_packet_txed = true;
+#endif
   }
 
   // Pull SDUs from queue
   while(pdu_space > head_len + 1 && tx_sdu_queue.size() > 0) {
+#ifdef ENABLE_DDRL
+  	if(a_packet_txed){
+		break;
+	}
+#endif
     log->debug("pdu_space=%d, head_len=%d\n", pdu_space, head_len);
     if(last_li > 0)
       header.li[header.N_li++] = last_li;
@@ -438,6 +448,9 @@ int rlc_um::rlc_um_tx::build_data_pdu(ui
       tx_sdu.reset();
     }
     pdu_space -= to_move;
+#ifdef ENABLE_DDRL
+	  a_packet_txed = true;
+#endif
   }
 
   if(tx_sdu) {
