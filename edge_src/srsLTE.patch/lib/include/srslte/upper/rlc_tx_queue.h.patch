--- srsLTE/lib/include/srslte/upper/rlc_tx_queue.h	2021-03-25 21:20:59.932588950 +1100
+++ srsLTE_modified/lib/include/srslte/upper/rlc_tx_queue.h	2021-03-22 16:20:01.280532000 +1100
@@ -33,7 +33,9 @@
 #include "srslte/common/block_queue.h"
 #include "srslte/common/common.h"
 #include <pthread.h>
-
+#ifdef ENABLE_DDRL
+#include "srs_ext.h"
+#endif
 namespace srslte {
 
 class rlc_tx_queue : public block_queue<unique_byte_buffer_t>::call_mutexed_itf
@@ -86,6 +88,29 @@ public:
     return 0; 
   }
 
+#ifdef ENABLE_DDRL
+long get_hol()
+{
+	if (!queue.empty()) {
+		const unique_byte_buffer_t& m = queue.front();
+		if (m.get()) {
+			return m->get_latency_us();
+		}
+	}
+	return 0;
+}
+
+struct timeval get_hts()
+{
+	if (!queue.empty()) {
+		const unique_byte_buffer_t& m = queue.front();
+		if (m.get()) {
+			return m->get_timestamp();
+		}
+	}
+	return TTICounter::get_a_invalid_time();
+}
+#endif
   // This is a hack to reset N_bytes counter when queue is corrupted (see line 89)
   void reset() {
     unread_bytes = 0;
